
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author marlonvanbesien
 */
public class WinkelApp implements IWinkelApp{
private HashMap<String, KlantenKaart> klanten;
private Winkel winkel;
private KlantenKaart aangemeldeKlant;

    public WinkelApp() {
        klanten = new HashMap(0);
    }
    public WinkelApp(String klantenBestand, String winkelBestand) throws KlantenKaartException{
        this.laadKlanten(klantenBestand);
        this.laadWinkel(winkelBestand);
    }
    

    @Override
    public int laadKlanten(String klantenBestand) throws KlantenKaartException {
       boolean succes=false; 
    try { // laad het data BESTAND
        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(klantenBestand));
        HashMap<String, KlantenKaart> lijst = new HashMap<>();
        lijst = (HashMap<String, KlantenKaart>) inputStream.readObject();
        klanten = lijst;
        succes =true;
    } catch (FileNotFoundException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    }if(succes)
       System.out.println("Klanten gelezen van bestand "+ klantenBestand);
   else
       throw new KlantenKaartException("Fout bij lezen van bestand "+ klantenBestand);
    
    return klanten.size();
    }
    

    @Override
    public void laadWinkel(String winkelBestand) throws KlantenKaartException {
       boolean succes=false;
    try {
        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(winkelBestand));
        winkel = (Winkel)inputStream.readObject();
        succes =true;
    } catch (FileNotFoundException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    }if(succes)
       System.out.println("Winkel gelezen van bestand "+ winkelBestand);
   else
       throw new KlantenKaartException("Fout bij lezen van bestand "+ winkelBestand);
    
    }
    
    

    @Override
    public int getAantalPunten() throws KlantenKaartException {
        if (winkel == null)
            throw new KlantenKaartException("Geen winkel ingeladen!");
        if (aangemeldeKlant == null)
            throw new KlantenKaartException("Geen klant aangemeld!");  
        int aantalPunten=0;
        for (Winkel w : aangemeldeKlant.getVerzameldePuntenPerWinkel().keySet()){
            if(w.equals(winkel))
                aantalPunten= aangemeldeKlant.getVerzameldePuntenPerWinkel().get(w);         
    }
        return aantalPunten;
    }
    @Override
    public String aanmeldenKlant(String id) throws KlantenKaartException {
         if (winkel == null)
            throw new KlantenKaartException("Geen winkel ingeladen!");
         if (!klanten.containsKey(id))
             throw new KlantenKaartException("Klant "+ "\'"+ id + "\'"+ " niet gevonden!");
        aangemeldeKlant= klanten.get(id);
         String string = "Welkom "+ aangemeldeKlant.getVoornaam() +" "+  aangemeldeKlant.getNaam() + "\nAantal punten verzameld: "+ this.getAantalPunten() +"\n"+ winkel.getBeloningTekst();
         return string;
    }

    @Override
    public String registrerenTransactie(double bedrag) throws KlantenKaartException {
         if (winkel == null)
            throw new KlantenKaartException("Geen winkel ingeladen!");
          if (aangemeldeKlant == null)
            throw new KlantenKaartException("Geen klant aangemeld!");  
          double punten =0;
          punten=winkel.getAantalPuntenPerEuro()*bedrag;
          aangemeldeKlant.toevoegenTransactie(winkel, bedrag, (int) punten);
          String string = aangemeldeKlant.getVoornaam() +" "+  aangemeldeKlant.getNaam()+ ", je transactie werd geregistreerd!!!"
                  + "\nAantal punten verzameld: " + aangemeldeKlant.getVerzameldePuntenPerWinkel().get(winkel);
          return string;
    }

    @Override
    public String registrerenBeloning(int aantalPunten) throws KlantenKaartException {
        if (winkel == null)
            throw new KlantenKaartException("Geen winkel ingeladen!");
        if (aangemeldeKlant == null)
            throw new KlantenKaartException("Geen klant aangemeld!"); 
        if (aangemeldeKlant.getVerzameldePuntenPerWinkel().get(winkel)==null)
            throw new KlantenKaartException("U heeft slechts 0 punten beschikbaar!!");  
        if (aangemeldeKlant.getVerzameldePuntenPerWinkel().get(winkel)< aantalPunten)
            throw new KlantenKaartException("U heeft slechts "+aangemeldeKlant.getVerzameldePuntenPerWinkel().get(winkel)+ " punten beschikbaar!!"); 
        int punten = aangemeldeKlant.getVerzameldePuntenPerWinkel().get(winkel);
        int nieuwePunten = punten - aantalPunten;
         aangemeldeKlant.getVerzameldePuntenPerWinkel().put(winkel, nieuwePunten);
         return aangemeldeKlant.getVoornaam() + " " +aangemeldeKlant.getNaam() +", je beloning werd geregistreerd!!" + '\n' +"Aantal punten verzameld: "+ nieuwePunten;
    }

    @Override
    public String getEmailAdressenKlanten() {
        if(klanten==null)
            return "";
        String string ="";
        ArrayList<String> lijst = new ArrayList<>();
        for(KlantenKaart klant : klanten.values()){
            if(klant.getVerzameldePuntenPerWinkel().get(winkel) != null){
                if(klant.getVerzameldePuntenPerWinkel().get(winkel)!=0)
                    lijst.add(klant.getEmail());
            }           
        }
        if(lijst.isEmpty())
            return "";
        else if(lijst.size()==1)
            string += lijst.get(0);
        else if (lijst.size()>1)
            string += lijst.get(0);
        for (int i=1; i< lijst.size(); i++)
            string += ";" + lijst.get(i);
        return string; 
}

    @Override
    public int bewaarKlanten(String klantenBestand) throws KlantenKaartException {
        ObjectOutputStream o = null;
        boolean isGelukt= false;
    try {
        o=new ObjectOutputStream(new FileOutputStream(klantenBestand));
        o.writeObject(klanten);
        isGelukt=true;
    } catch (IOException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    }
    if(isGelukt ==false){
        throw new KlantenKaartException("Fout bij schrijven naar bestand "+ klantenBestand);
        
    } else
        return klanten.size();
    }

    @Override
    public void bewaarWinkel(String winkelBestand) throws KlantenKaartException {
        ObjectOutputStream o = null;
        boolean isGelukt= false;
        try {
        if (winkel == null)
            throw new KlantenKaartException("Geen winkel ingeladen!");
        o= new ObjectOutputStream(new FileOutputStream(winkelBestand));
        o.writeObject(winkel);
        isGelukt=true;
        System.out.println("Winkel weggeschreven naar bestand "+ winkelBestand);
    } catch (IOException ex) {
        Logger.getLogger(WinkelApp.class.getName()).log(Level.SEVERE, null, ex);
    } if(isGelukt ==false){
            throw new KlantenKaartException("Fout bij schrijven naar bestand "+ winkelBestand);
        }
    }
    
    @Override
    public String printOverzichtGespaardePunten(String klantID) throws KlantenKaartException {
        if (!klanten.containsKey(klantID))
             throw new KlantenKaartException("Klant "+ "\'"+ klantID + "\'"+ " niet gevonden!");
        boolean gevonden =false;
        for(int punten: klanten.get(klantID).getVerzameldePuntenPerWinkel().values()){
            if(punten!= 0)
                gevonden=true;
        }
        String output ="";
        if (gevonden==false)
             output=klanten.get(klantID).getVoornaam()+ " "+  klanten.get(klantID).getNaam() +" heeft nog geen punten verzameld" ;
        else
        {
            output = "Overzicht voor "+ klanten.get(klantID).getVoornaam()+ " "+  klanten.get(klantID).getNaam()
                    + "\n------------- ";
            for (Winkel i :klanten.get(klantID).getVerzameldePuntenPerWinkel().keySet())
                if (i!=null)
                    output += "\n"+i.getNaam()+": " + klanten.get(klantID).getVerzameldePuntenPerWinkel().get(i)+ " punten";
                    
        }
        return output;
    }
    
}
