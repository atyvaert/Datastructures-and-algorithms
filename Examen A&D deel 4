import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author lfcoghe
 */
public class Cursus {
    
    private String naamCursus;
    private String naamLesgever;
    private HashSet<Student> studenten;
    private HashSet<ScoreItem> scoreItems;
    
    public Cursus(HashSet<Student> students, String naamCursus, String naamLesgever){
        this.naamCursus = naamCursus;
        this.naamLesgever = naamLesgever;
        studenten = students;
        scoreItems = new HashSet();
    }
    
    public void toevoegenScoreItem(ScoreItem scoreItem){
        
        if(scoreItem != null){
            if(!scoreItems.contains(scoreItem))
                scoreItems.add(scoreItem);
            else
                System.out.println("Het score-item "+scoreItem.getNaam()+ " bestaat al");
        }
    }
    
    public void verwijderenScoreItem(String naamItem){
        boolean flag =false;
        for(ScoreItem it : scoreItems){
            if(it.getNaam().equals(naamItem)){
                scoreItems.remove(it);
                flag =true;
            }
        }
        if(!flag)
            System.out.println("Het score-item "+ naamItem+ " bestaat niet");
    }
    
    public void toevoegenScore(String naamItem, String studentenID, double score){
        boolean flag =false;
        for(ScoreItem it : scoreItems){
            if(it.getNaam().equals(naamItem)){
                it.toevoegenScore(studentenID, score);
                flag = true;
            }
        }
        if(!flag)
            System.out.println("Het score-item "+ naamItem+ " bestaat niet");
    }
    
    public double opvragenScore(String naamItem, String studentenID){
        Student st = null;
        ScoreItem sc = null;
        for(Student it : studenten){
            if(it.getStudentenID().equals(studentenID))
                st = it;
        }
        for(ScoreItem it : scoreItems){
            if(it.getNaam().equals(naamItem)){
                sc = it;
            }
        }
        
        if(st == null || sc == null)
            return (double) (Object) null;
        else
                return sc.getScores().get(st.getStudentenID());
    }
    
    public void leesScores(File file){
        ScoreItem sc = null;
       
        try {
            Scanner input = new Scanner(file);
            String line = input.nextLine();
            String[] aanmaak = line.split(";");
            if(aanmaak.length>3){
                for(int i = 3;i<aanmaak.length; i++){
                    if(!scoreItems.contains(aanmaak[i]))
                        sc = new ScoreItem(aanmaak[i], 20);
                }
            while(input.hasNextLine()){
                line = input.nextLine();
                String[] splitter = line.split(";");
                for(int i=3;i<splitter.length;i++){
                    if(!splitter[0].equals("") && !splitter[i].equals(""))
                     sc.toevoegenScore(splitter[0], Double.parseDouble(splitter[i]));
                }
            }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Cursus.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Het bestand '"+ file.getName()+"' kan niet gevonden worden!");
        } catch (Exception ex){
             System.out.println("Het bestand '"+ file.getName()+"' is niet correct gestructureerd!");
        }
        
        
    }
    
    public void herberekenScores(BerekendScoreItem bereken){
        
    }
    
    public void herberekenStatistieken(){
        
        
    }
    public String toString(){
        String output = "";
        output += this.naamCursus +"\n" + this.naamLesgever+ "\n"+"\n";
        for(ScoreItem it : scoreItems){
            if(it!= null){
                output+= it.getNaam()+"\n"+ it.getGemiddelde()+ "\n"+ it.getMediaan()+ "\n"+ it.getMax()+"\n"+ it.getMin()+"\n";
            }
        }
        return output;
    }
    
    public static void main(String[] args){
        HashSet<Student> students = new HashSet();
        students.add(new Student("1", "Aeyels", "Liesbeth"));
        students.add(new Student("2", "Willems", "Jef"));
        students.add(new Student("3", "De Schrijvere", "Sara"));
        students.add(new Student("4", "Dhondt", "Evelien"));
        students.add(new Student("5", "De Grauw", "Jelle"));
        Cursus Kindergeneeskunde = new Cursus(students, "Kindergeneeskunde", "Dirk Matthys");
        File puntenPediatrie = new File("puntenPediatrie.csv");
        Kindergeneeskunde.leesScores(puntenPediatrie);
        String[] scoreitems = new String[2];
        scoreitems[0] = "MCExamen";
        scoreitems[1] = "Mondeling";
        double[] gewichten = new double[2];
        gewichten[0] = 0.4;
        gewichten[1] = 0.6;
        BerekendScoreItem Eindscore = new BerekendScoreItem("Kindergeneeskunde", 20,scoreitems, gewichten);
        Kindergeneeskunde.herberekenStatistieken();
        Kindergeneeskunde.toString();
    }
}
